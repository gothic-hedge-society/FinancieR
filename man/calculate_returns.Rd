% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calculate_returns.R
\name{calculate_returns}
\alias{calculate_returns}
\title{Calculate Returns}
\usage{
calculate_returns(
  assets,
  date_range_xts = NULL,
  buy_at = "Close",
  sell_at = "Close",
  returns_method = "ln"
)
}
\arguments{
\item{assets}{a list of sub-lists named and corresponding to a given
asset, for example, "AAPL". Each sublist contains split, dividend, and
aggregated prices data as xts objects. An example of an object that may be
passed as \emph{asset_data} is \link{stock_data}.}

\item{date_range_xts}{A string that specifies the date range for which
\emph{calculate_daily_returns}() will calculate returns. Use xts subsetting
notation to specify the date range; see examples in \link[xts]{xts}. If
missing or NULL, then the full date range of OHLCV prices is used.}

\item{buy_at}{Character: Specifies the 'initial price' to be used for
calculating returns. Must be one of "open", "high", "low", "close", or
"price", defaults to "Close". Not case sensitive.}

\item{sell_at}{Character: Specifies the 'final price' to be used for
calculating returns. Must be One of "open", "high", "low", "close", or
"price", defaults to "Close". Not case sensitive.}

\item{returns_method}{Character vector specifying how the returns should be
calculated, defaults to \strong{\emph{"ln}}. Choices are:
\itemize{
\item{\strong{"ln"}}: Log return; \emph{ln(sell_price / buy_price)} where
\emph{ln()} denotes the natural logarithm (base \emph{e}).
\item{\strong{"log2"}}: Log return; \emph{log(sell_price / buy_price)}
where \emph{log()} denotes the logarithm to base \emph{2}.
\item{\strong{"log10"}}: Log return; \emph{log(sell_price / buy_price)}
where \emph{log()} denotes the logarithm to base \emph{10}.
\item{\strong{"pct_diff"}}: Percent difference;
\emph{(sell_price - buy_price)/buy_price}. NOT multiplied by 100.
\item{\strong{"multiple"}}: Price multiple; \emph{sell_price / buy_price}.
}}
}
\value{
An xts object. Each element is the return observed on the date given
by the xts' index with respect to the previous period (taking into
account any splits and dividends that may have occurred) for the asset
specified by the element's column name.
}
\description{
Calculate period-over-period historical returns for a list of assets, taking
into account splits and dividends.
}
\examples{
# Calculate the daily natural log returns of Apple (AAPL) and AT&T (T) for 2014,
# a year in which Apple had a major stock split. 
aapl_att_returns <- calculate_returns(
  assets         = stock_data[c("AAPL", "T")],
  date_range_xts = "2014"
)

# Print the first 10 rows:
head(aapl_att_returns, 10)

# Let's check this result in a few key places. 

# 1) Normal trading day
#      Because we didn't specify otherwise, calculate_returns() will use its
#      default behavior and will calculate period-over-period natural-log
#      returns using Close prices. Let's pick Monday, 21 July 2014, which was a
#      normal trading day (no dividend, no split) for AT&T. The previous trading
#      day was Friday, 18 Jul 2014:
stock_data$T$prices["2014-07-18/2014-07-21"]

#      The natural log return using Close prices (calculate_returns() default)
#      as calculated by hand should be:
log(
  as.numeric(stock_data$T$prices$Close["2014-07-21"]) /
    as.numeric(stock_data$T$prices$Close["2014-07-18"])
)

#      This return was realized on 2014-07-21, so it should appear at that date
#      index in the results returned by calculate_returns():
aapl_att_returns["2014-07-21", "T"]

# 2) AT&T's dividend
#      AT&T paid several dividends in 2014:
stock_data$T$dividends["2014"]

#     If you had bought a share of AT&T stock on 07 July 2014 and sold it at the
#     Close price the next day after the dividend went ex-div, you would have
#     collected the closing price from the sale plus the dividend amount, 
#     meaning that your total earned return would have been:
log(
  (
    as.numeric(stock_data$T$prices$Close["2014-07-08"]) + 
      as.numeric(stock_data$T$dividends$DividendAmount["2014-07-08"])
  ) / as.numeric(stock_data$T$prices$Close["2014-07-07"])
)

#      This return was realized on 2014-07-08, so it should appear at that date
#      index in the results returned by calculate_returns():
aapl_att_returns["2014-07-08", "T"]
# --> This isn't an "accident". Ask yourself why this might be, 

# 2) AAPL's split
#      Apple underwent a major split on a Monday in June of 2014:
stock_data$AAPL$splits

#     If you had bought a share of AAPL at Close price on Friday, you would have
#     woken up on Monday morning with 7 shares... each one of which worth about
#     1/7th what they were worth previously. If you sold those shares at Close
#     price on Monday, your total return would be:
log(
  (
    as.numeric(stock_data$AAPL$prices$Close["2014-06-09"]) *
      as.numeric(stock_data$AAPL$splits$Denominator["2014-06-09"])
  ) / as.numeric(stock_data$AAPL$prices$Close["2014-06-06"])
)

#      This return was realized on 2014-06-09, so it should appear at that date
#      index in the results returned by calculate_returns():
aapl_att_returns["2014-06-09", "AAPL"]
}
